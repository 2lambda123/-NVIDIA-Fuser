import torch
from nvfuser import FusionDefinition, DataType

def nvfuser_fusion_id0(fd : FusionDefinition) -> None :
    T0 = fd.define_tensor(shape=[-1, -1, -1], contiguity=[True, True, True], dtype=DataType.BFloat16, is_cpu=False, stride_order=[2, 1, 0])
    S1 = fd.define_scalar(16, dtype=DataType.Int)
    S2 = fd.define_scalar(4096, dtype=DataType.Int)
    S3 = fd.define_scalar(32, dtype=DataType.Int)
    S4 = fd.define_scalar(3, dtype=DataType.Int)
    S5 = fd.define_scalar(128, dtype=DataType.Int)
    V6 = fd.define_vector([S1, S2, S3, S4, S5], dtype=DataType.Int)
    T7 = fd.ops.reshape(T0, new_shape=V6)
    T8 = fd.ops.permute(T7, dims=[0, 2, 3, 1, 4])
    T9 = fd.ops.slice(T8, start_indices=[0, 0, 0, 0, 0], end_indices=[16, 32, 1, 4096, 128], strides=[1, 1, 1, 1, 1])
    T10 = fd.ops.slice(T8, start_indices=[0, 0, 1, 0, 0], end_indices=[16, 32, 2, 4096, 128], strides=[1, 1, 1, 1, 1])
    T11 = fd.ops.slice(T8, start_indices=[0, 0, 2, 0, 0], end_indices=[16, 32, 3, 4096, 128], strides=[1, 1, 1, 1, 1])
    S12 = fd.define_scalar(16, dtype=DataType.Int)
    S13 = fd.define_scalar(32, dtype=DataType.Int)
    S14 = fd.define_scalar(4096, dtype=DataType.Int)
    S15 = fd.define_scalar(128, dtype=DataType.Int)
    V16 = fd.define_vector([S12, S13, S14, S15], dtype=DataType.Int)
    T17 = fd.ops.reshape(T9, new_shape=V16)
    S18 = fd.define_scalar(16, dtype=DataType.Int)
    S19 = fd.define_scalar(32, dtype=DataType.Int)
    S20 = fd.define_scalar(4096, dtype=DataType.Int)
    S21 = fd.define_scalar(128, dtype=DataType.Int)
    V22 = fd.define_vector([S18, S19, S20, S21], dtype=DataType.Int)
    T23 = fd.ops.reshape(T10, new_shape=V22)
    S24 = fd.define_scalar(16, dtype=DataType.Int)
    S25 = fd.define_scalar(32, dtype=DataType.Int)
    S26 = fd.define_scalar(4096, dtype=DataType.Int)
    S27 = fd.define_scalar(128, dtype=DataType.Int)
    V28 = fd.define_vector([S24, S25, S26, S27], dtype=DataType.Int)
    T29 = fd.ops.reshape(T11, new_shape=V28)
    T30 = fd.ops.slice(T17, start_indices=[0, 0, 0, 0], end_indices=[16, 32, 4096, 128], strides=[1, 1, 1, 1])
    T31 = fd.ops.slice(T30, start_indices=[0, 0, 0, 0], end_indices=[16, 32, 4096, 64], strides=[1, 1, 1, 1])
    T32 = fd.ops.slice(T30, start_indices=[0, 0, 0, 64], end_indices=[16, 32, 4096, 128], strides=[1, 1, 1, 1])
    T33 = fd.ops.cast(T32, dtype=DataType.Float)
    T34 = fd.ops.neg(T33)
    T35 = fd.ops.cast(T34, dtype=DataType.BFloat16)
    T36 = fd.ops.slice(T23, start_indices=[0, 0, 0, 0], end_indices=[16, 32, 4096, 128], strides=[1, 1, 1, 1])
    T37 = fd.ops.slice(T36, start_indices=[0, 0, 0, 0], end_indices=[16, 32, 4096, 64], strides=[1, 1, 1, 1])
    T38 = fd.ops.slice(T36, start_indices=[0, 0, 0, 64], end_indices=[16, 32, 4096, 128], strides=[1, 1, 1, 1])
    T39 = fd.ops.cast(T38, dtype=DataType.Float)
    T40 = fd.ops.neg(T39)
    T41 = fd.ops.cast(T40, dtype=DataType.BFloat16)
    T42 = fd.ops.slice(T17, start_indices=[0, 0, 0, 0], end_indices=[16, 32, 4096, 0], strides=[1, 1, 1, 1])
    T43 = fd.ops.slice(T23, start_indices=[0, 0, 0, 0], end_indices=[16, 32, 4096, 0], strides=[1, 1, 1, 1])
    fd.add_output(T31)
    fd.add_output(T35)
    fd.add_output(T37)
    fd.add_output(T41)
    fd.add_output(T42)
    fd.add_output(T43)
    fd.add_output(T29)

with FusionDefinition() as fd:
    nvfuser_fusion_id0(fd)

inputs = [
    torch.randn((805306368,), dtype=torch.bfloat16, device='cuda:0').as_strided((16, 4096, 12288), (50331648, 12288, 1)),
]
fd.execute(inputs)
