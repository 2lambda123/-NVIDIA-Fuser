project('nvfuser', 'cpp', subproject_dir: 'lib')

cuda_dep = dependency('cuda', version : '>=11')

dynamic_type = subproject('dynamic_type')
dynamic_type_dep = dynamic_type.get_variable('dynamic_type_dep')

flatbuffers_dep = dependency('flatbuffers')

python = import('python')
python_installation = python.find_installation()

runtime_resources = [
    'array',
    'basic_type_traits',
    'bf16_support',
    'bit',
    'block_reduction',
    'block_sync_atomic',
    'block_sync_default',
    'block_welford_outer',
    'broadcast',
    'complex_number',
    'fp16_support',
    'fused_reduction',
    'fused_welford_helper',
    'fused_welford_impl',
    'fused_welford_impl_outer',
    'grid_broadcast',
    'grid_reduction',
    'grid_sync',
    'helpers',
    'index_utils',
    'memory',
    'random_numbers',
    'tensor',
    'tensorcore',
    'tuple',
    'type_traits',
    'warp',
    'welford',
]

runtime_resource_targets = []

foreach runtime : runtime_resources
    target = custom_target(
        'nvfuser_runtime_' + runtime,
        input : ['tools/stringify_file.py', 'runtime/' + runtime + '.cu'],
        output : runtime + '.h',
        command : [
            python_installation,
            '@INPUT0@',
            '-i',
            '@INPUT1@',
            '-o',
            '@OUTPUT@',
        ],
    )
    runtime_resource_targets += target
endforeach

nvfuser_codegen_src = [
    'csrc/compute_at.cpp',
    'csrc/inlining.cpp',
    'csrc/compute_at_map.cpp',
    'csrc/codegen.cpp',
    'csrc/contiguity.cpp',
    'csrc/debug.cpp',
    'csrc/dispatch.cpp',
    'csrc/driver_api.cpp',
    'csrc/dynamic_transform.cpp',
    'csrc/expr_evaluator.cpp',
    'csrc/expr_simplifier.cpp',
    'csrc/exceptions.cpp',
    'csrc/executor.cpp',
    'csrc/executor_kernel_arg.cpp',
    'csrc/executor_params.cpp',
    'csrc/evaluator_common.cpp',
    'csrc/executor_utils.cpp',
    'csrc/fusion.cpp',
    'csrc/graph_fuser.cpp',
    'csrc/grouped_reduction.cpp',
    'csrc/index_compute.cpp',
    'csrc/instrumentation.cpp',
    'csrc/ir/base_nodes.cpp',
    'csrc/ir/builder.cpp',
    'csrc/ir/cloner.cpp',
    'csrc/ir/container.cpp',
    'csrc/ir/graphviz.cpp',
    'csrc/ir/iostream.cpp',
    'csrc/ir/utils.cpp',
    'csrc/ir/nodes.cpp',
    'csrc/iter_visitor.cpp',
    'csrc/kernel.cpp',
    'csrc/kernel_cache.cpp',
    'csrc/kernel_db/kernel_db.cpp',
    'csrc/kernel_db/utils.cpp',
    'csrc/kernel_ir.cpp',
    'csrc/kernel_ir_dispatch.cpp',
    'csrc/device_lower/analysis/index_compute.cpp',
    'csrc/device_lower/analysis/divisible_split.cpp',
    'csrc/device_lower/analysis/fused_reduction.cpp',
    'csrc/device_lower/analysis/predicate_elimination.cpp',
    'csrc/device_lower/analysis/shift.cpp',
    'csrc/device_lower/analysis/sync_information.cpp',
    'csrc/device_lower/analysis/thread_predicate.cpp',
    'csrc/device_lower/analysis/trivial_broadcast.cpp',
    'csrc/device_lower/analysis/bank_conflict.cpp',
    'csrc/device_lower/pass/alias_memory.cpp',
    'csrc/device_lower/pass/allocation.cpp',
    'csrc/device_lower/pass/double_buffer.cpp',
    'csrc/device_lower/pass/expr_sort.cpp',
    'csrc/device_lower/pass/fusion_simplifier.cpp',
    'csrc/device_lower/pass/index.cpp',
    'csrc/device_lower/pass/scalar_hoist.cpp',
    'csrc/device_lower/pass/insert_syncs.cpp',
    'csrc/device_lower/pass/instrument.cpp',
    'csrc/device_lower/pass/loop_rotation.cpp',
    'csrc/device_lower/pass/loops.cpp',
    'csrc/device_lower/pass/magic_zero.cpp',
    'csrc/device_lower/pass/misaligned_vectorization.cpp',
    'csrc/device_lower/pass/predicate.cpp',
    'csrc/device_lower/pass/replace_size.cpp',
    'csrc/device_lower/pass/unroll.cpp',
    'csrc/device_lower/pass/vectorize_welford.cpp',
    'csrc/device_lower/pass/warp_reduce.cpp',
    'csrc/device_lower/utils.cpp',
    'csrc/device_lower/validation.cpp',
    'csrc/device_lower/lower2device.cpp',
    'csrc/manager.cpp',
    'csrc/maxinfo_propagator.cpp',
    'csrc/multidevice/communication.cpp',
    'csrc/multidevice/communicator.cpp',
    'csrc/multidevice/executor.cpp',
    'csrc/multidevice/runtime.cpp',
    'csrc/multidevice/pipeline.cpp',
    'csrc/multidevice/pipeline_ir.cpp',
    'csrc/mutator.cpp',
    'csrc/non_divisible_split.cpp',
    'csrc/ops/alias.cpp',
    'csrc/ops/arith.cpp',
    'csrc/ops/composite.cpp',
    'csrc/ops/indexing.cpp',
    'csrc/ops/normalization.cpp',
    'csrc/ops/utils.cpp',
    'csrc/options.cpp',
    'csrc/parallel_dimension_map.cpp',
    'csrc/parallel_type_bitmap.cpp',
    'csrc/parser.cpp',
    'csrc/partial_split_map.cpp',
    'csrc/partition.cpp',
    'csrc/predicate_compute.cpp',
    'csrc/register_interface.cpp',
    'csrc/rng.cpp',
    'csrc/root_domain_map.cpp',
    'csrc/serde/polymorphic_value_serde.cpp',
    'csrc/serde/utils.cpp',
    'csrc/scheduler/heuristic_types.cpp',
    'csrc/scheduler/pointwise.cpp',
    'csrc/scheduler/pointwise_utils.cpp',
    'csrc/scheduler/transpose.cpp',
    'csrc/scheduler/matmul.cpp',
    'csrc/scheduler/matmul_utils.cpp',
    'csrc/scheduler/normalization_inner.cpp',
    'csrc/scheduler/normalization_inner_outer.cpp',
    'csrc/scheduler/normalization_outer.cpp',
    'csrc/scheduler/normalization_utils.cpp',
    'csrc/scheduler/no_op.cpp',
    'csrc/scheduler/reduction.cpp',
    'csrc/scheduler/reduction_utils.cpp',
    'csrc/scheduler/registry.cpp',
    'csrc/scheduler/registry_utils.cpp',
    'csrc/scheduler/utils.cpp',
    'csrc/scheduler/vectorize_helper.cpp',
    'csrc/swizzle.cpp',
    'csrc/sys_utils.cpp',
    'csrc/type_inference.cpp',
    'csrc/type_promotion.cpp',
    'csrc/fusion_segmenter.cpp',
    'csrc/tensor_metadata.cpp',
    'csrc/tensor_view.cpp',
    'csrc/tma.cpp',
    'csrc/transform_iter.cpp',
    'csrc/transform_replay.cpp',
    'csrc/transform_rfactor.cpp',
    'csrc/transform_view.cpp',
    'csrc/type.cpp',
    'csrc/utils.cpp',
    'csrc/mma_type.cpp',
    'csrc/scheduler/mma_utils.cpp',
    'csrc/optimization/add_axioms.cpp',
    'csrc/optimization/consecutive_cast.cpp',
    'csrc/optimization/pre_segmenter.cpp',
    'csrc/optimization/remove_empty.cpp',
]

library(
    'nvfuser_codegen',
    nvfuser_codegen_src + runtime_resource_targets,
    include_directories : include_directories('csrc'),
    dependencies: [dynamic_type_dep, flatbuffers_dep, cuda_dep]
)
